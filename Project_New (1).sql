-- CREATING DATABASE 

CREATE database PROJECT_NEW;

USE PROJECT_NEW;

-- SETTING SAFE UPDATE
SET SQL_SAFE_UPDATES = 0;

-- SELECTING THE TABLE 
SELECT * FROM CUSTOMER_PURCHASE_DATA;

-- CHECKING NULL VALUES 

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE TRANSACTIONID IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE CUSTOMERID IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE PRODUCTID IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE CUSTOMERNAME IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE PRODUCTNAME IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE PRODUCTCATEGORY IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE PURCHASEQUANTITY IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE PURCHASEPRICE IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE PURCHASEDATE IS NULL;

SELECT * FROM CUSTOMER_PURCHASE_DATA
WHERE COUNTRY IS NULL;

-- CREATING CUSTOMERS TABLE
CREATE TABLE CUSTOMERS AS 
SELECT ROW_NUMBER() OVER (ORDER BY CUSTOMERID) AS CUSTOMER_ID, CUSTOMERNAME, COUNTRY
FROM CUSTOMER_PURCHASE_DATA;
 
-- ASSIGNING PRIMARY KEY
ALTER TABLE CUSTOMERS
ADD PRIMARY KEY (CUSTOMER_ID);

-- SELECTING THE CUSTOMERS TABLE 
SELECT * FROM CUSTOMERS;

-- CREATING PRODUCTS TABLE 
CREATE TABLE PRODUCTS AS 
SELECT ROW_NUMBER() OVER (ORDER BY PRODUCTID)+1000 AS PRODUCT_ID, PRODUCTNAME, PRODUCTCATEGORY
FROM CUSTOMER_PURCHASE_DATA;

-- ASSIGNING PRIMARY KEY
ALTER TABLE PRODUCTS 
ADD PRIMARY KEY (PRODUCT_ID);

-- Step 1: Create a temporary table to hold unique product identifiers
CREATE TABLE UNIQUE_PRODUCTS AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY PRODUCTNAME, PRODUCTCATEGORY) + 10000 AS PRODUCTID,
    PRODUCTNAME,
    PRODUCTCATEGORY
FROM (SELECT DISTINCT PRODUCTNAME, PRODUCTCATEGORY FROM PRODUCTS) AS unique_products;

-- Step 2: Update the PRODUCTS table with consistent PRODUCTID
UPDATE PRODUCTS p
JOIN UNIQUE_PRODUCTS up ON p.PRODUCTNAME = up.PRODUCTNAME AND p.PRODUCTCATEGORY = up.PRODUCTCATEGORY
SET p.PRODUCTID = up.PRODUCTID;

-- Step 3: Drop the temporary table
DROP TABLE UNIQUE_PRODUCTS;

-- Step 1: Rename the column in PRODUCTS table
ALTER TABLE PRODUCTS CHANGE COLUMN PRODUCT_ID PRODUCTROW BIGINT UNSIGNED NOT NULL;

-- Step 2: Remove duplicates from PRODUCTS table
CREATE TABLE UNIQUE_PRODUCTS AS
SELECT 
    MIN(PRODUCTROW) AS PRODUCTROW,
    PRODUCTNAME,
    PRODUCTCATEGORY
FROM PRODUCTS
GROUP BY PRODUCTNAME, PRODUCTCATEGORY;

DELETE FROM PRODUCTS;

INSERT INTO PRODUCTS (PRODUCTROW, PRODUCTNAME, PRODUCTCATEGORY)
SELECT PRODUCTROW, PRODUCTNAME, PRODUCTCATEGORY FROM UNIQUE_PRODUCTS;

DROP TABLE UNIQUE_PRODUCTS;

ALTER TABLE PRODUCTS ADD COLUMN PRODUCTID BIGINT UNSIGNED;
-- Step 1: Create a temporary table to hold unique product identifiers
CREATE TABLE UNIQUE_PRODUCTS AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY PRODUCTNAME, PRODUCTCATEGORY) + 10000 AS PRODUCTID,
    PRODUCTNAME,
    PRODUCTCATEGORY
FROM (SELECT DISTINCT PRODUCTNAME, PRODUCTCATEGORY FROM PRODUCTS) AS unique_products;

-- Step 2: Update the PRODUCTS table with consistent PRODUCTID
UPDATE PRODUCTS p
JOIN UNIQUE_PRODUCTS up ON p.PRODUCTNAME = up.PRODUCTNAME AND p.PRODUCTCATEGORY = up.PRODUCTCATEGORY
SET p.PRODUCTID = up.PRODUCTID;

-- Step 3: Drop the temporary table
DROP TABLE UNIQUE_PRODUCTS;

-- SELECTING THE PRODUCTS TABLE 
SELECT * FROM PRODUCTS;

-- CREATING ORDERS TABLE  
CREATE TABLE ORDERS (
    ORDERID INT PRIMARY KEY AUTO_INCREMENT,
    CUSTOMERID BIGINT UNSIGNED,
    TRANSACTIONID INT,
    PURCHASEDATE DATE,
    PURCHASEQUANTITY INT,
    PURCHASEPRICE DECIMAL(10, 2),
    FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

ALTER TABLE ORDERS AUTO_INCREMENT = 10001;

INSERT INTO ORDERS (CUSTOMERID, TRANSACTIONID, PURCHASEDATE, PURCHASEQUANTITY, PURCHASEPRICE)
SELECT CUSTOMERID, TRANSACTIONID, PURCHASEDATE, PURCHASEQUANTITY, PURCHASEPRICE
FROM CUSTOMER_PURCHASE_DATA;

-- SELECTING ORDERS TABLE
SELECT * FROM ORDERS;

-- CREATING ORDERDETAILS TABLE 
CREATE TABLE ORDERDETAILS (
    ORDERDETAILSID INT PRIMARY KEY AUTO_INCREMENT,
    ORDER_ID INT,
    PURCHASEQUANTITY INT,
    PURCHASEPRICE DECIMAL(10, 2),
    PRODUCTID BIGINT UNSIGNED
);

INSERT INTO ORDERDETAILS (ORDER_ID, PURCHASEQUANTITY, PURCHASEPRICE, PRODUCTID)
SELECT 
    o.ORDERID AS ORDER_ID,
    cpd.PURCHASEQUANTITY,
    cpd.PURCHASEPRICE,
    p.PRODUCTID
FROM CUSTOMER_PURCHASE_DATA cpd
JOIN ORDERS o ON cpd.CUSTOMERID = o.CUSTOMERID
               AND cpd.TRANSACTIONID = o.TRANSACTIONID
               AND cpd.PURCHASEDATE = o.PURCHASEDATE
JOIN PRODUCTS p ON cpd.PRODUCTNAME = p.PRODUCTNAME
               AND cpd.PRODUCTCATEGORY = p.PRODUCTCATEGORY;
ALTER TABLE ORDERDETAILS
ADD CONSTRAINT fk_order FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDERID);
ALTER TABLE ORDERDETAILS
ADD CONSTRAINT fk_order FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDERID);

-- SELECTING THE ORDERDETAILS TABLE
SELECT * FROM ORDERDETAILS; 

-- ADVANCED QUERIES 

-- TOTAL purchaseprice FOR EACH CUSTOMERS
SELECT C.CUSTOMER_ID, CUSTOMERNAME, SUM(purchaseprice) AS TOTAL_AMOUNT
FROM CUSTOMERS C JOIN ORDERS O on C.CUSTOMER_ID = O.CUSTOMERID
GROUP BY 1,2
ORDER BY TOTAL_AMOUNT DESC,1 ASC;

-- TOTAL SALES FOR EACH PRODUCT
SELECT P.PRODUCTID,PRODUCTNAME,PRODUCTCATEGORY,SUM(PURCHASEPRICE) AS TOTAL_SALES
FROM PRODUCTS P JOIN ORDERDETAILS OD ON P.PRODUCTID = OD.PRODUCTID
GROUP BY p.PRODUCTID, p.PRODUCTNAME, p.PRODUCTCATEGORY
ORDER BY TOTAL_SALES DESC,P.PRODUCTID;

-- TOTAL SALES FOR EACH MONTH
SELECT od.PRODUCTID,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 1 THEN od.PURCHASEQUANTITY ELSE 0 END) AS January,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 2 THEN od.PURCHASEQUANTITY ELSE 0 END) AS February,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 3 THEN od.PURCHASEQUANTITY ELSE 0 END) AS March,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 4 THEN od.PURCHASEQUANTITY ELSE 0 END) AS April,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 5 THEN od.PURCHASEQUANTITY ELSE 0 END) AS May,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 6 THEN od.PURCHASEQUANTITY ELSE 0 END) AS June,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 7 THEN od.PURCHASEQUANTITY ELSE 0 END) AS July,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 8 THEN od.PURCHASEQUANTITY ELSE 0 END) AS August,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 9 THEN od.PURCHASEQUANTITY ELSE 0 END) AS September,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 10 THEN od.PURCHASEQUANTITY ELSE 0 END) AS October,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 11 THEN od.PURCHASEQUANTITY ELSE 0 END) AS November,
    SUM(CASE WHEN MONTH(o.PURCHASEDATE) = 12 THEN od.PURCHASEQUANTITY ELSE 0 END) AS December
FROM ORDERDETAILS od
JOIN ORDERS o ON od.ORDER_ID = o.ORDERID
GROUP BY od.PRODUCTID;
    
-- AVERAGE SALES PER PRODUCT
SELECT PRODUCTID, AVG(PURCHASEPRICE) AS AVG_SALES
FROM ORDERDETAILS
GROUP BY PRODUCTID
ORDER BY AVG_SALES DESC;
 
-- MAXIMUM SALES PER PRODUCT
SELECT PRODUCTID, MAX(PURCHASEPRICE) AS MAX_SALES
FROM ORDERDETAILS
GROUP BY PRODUCTID
ORDER BY MAX_SALES DESC ;

-- MINIMUM SALES PER PRODUCT
SELECT PRODUCTID, MIN(PURCHASEPRICE) AS MIN_SALES
FROM ORDERDETAILS
GROUP BY PRODUCTID
ORDER BY MIN_SALES DESC; 

-- SALES GROWTH RATE OVER MONTH FOR EACH PRODUCT
SELECT p.PRODUCTID, p.PRODUCTNAME,p.PRODUCTCATEGORY,DATE_FORMAT(o.PURCHASEDATE, '%Y-%m') AS Month,SUM(od.PURCHASEPRICE) AS TotalSales,
LAG(SUM(od.PURCHASEPRICE)) OVER (PARTITION BY p.PRODUCTID ORDER BY DATE_FORMAT(o.PURCHASEDATE, '%Y-%m')) AS PreviousMonthSales,
(SUM(od.PURCHASEPRICE) - LAG(SUM(od.PURCHASEPRICE)) OVER (PARTITION BY p.PRODUCTID ORDER BY DATE_FORMAT(o.PURCHASEDATE, '%Y-%m'))) / LAG(SUM(od.PURCHASEPRICE)) OVER (PARTITION BY p.PRODUCTID ORDER BY DATE_FORMAT(o.PURCHASEDATE, '%Y-%m')) * 100 AS GrowthRate
FROM ORDERDETAILS od
JOIN ORDERS o ON od.ORDER_ID = o.ORDERID
JOIN PRODUCTS p ON od.PRODUCTID = p.PRODUCTID
GROUP BY p.PRODUCTID, p.PRODUCTNAME, p.PRODUCTCATEGORY, DATE_FORMAT(o.PURCHASEDATE, '%Y-%m');

-- TOP 5 PRODUCTS BY SALES
SELECT  p.PRODUCTID, p.PRODUCTNAME,p.PRODUCTCATEGORY,SUM(od.PURCHASEPRICE) AS TotalSales
FROM ORDERDETAILS od
JOIN PRODUCTS p ON od.PRODUCTID = p.PRODUCTID
GROUP BY p.PRODUCTID, p.PRODUCTNAME,p.PRODUCTCATEGORY
ORDER BY TotalSales DESC
LIMIT 5;

-- CATEGORY_WISE SALES
SELECT PRODUCTCATEGORY, SUM(od.PURCHASEPRICE) AS TotalSales
FROM PRODUCTS P JOIN ORDERDETAILS OD ON P.PRODUCTID=OD.PRODUCTID
GROUP BY PRODUCTCATEGORY
ORDER BY TOTALSALES DESC;

-- SALES AMONG DIFFERENT COUNTRIES
SELECT COUNTRY,SUM(purchaseprice) AS SALES
FROM CUSTOMERS C JOIN ORDERS O ON C.CUSTOMER_ID=O.CUSTOMERID
GROUP BY COUNTRY
ORDER BY SALES DESC; 

-- PRODUCT SALES EACH MONTH 
SELECT p.PRODUCTID, p.PRODUCTNAME,MONTH(o.PURCHASEDATE) AS Month,SUM(od.PURCHASEPRICE) AS TotalSales
FROM ORDERDETAILS od
JOIN ORDERS o ON od.ORDER_ID = o.ORDERID
JOIN PRODUCTS p ON od.PRODUCTID = p.PRODUCTID
GROUP BY p.PRODUCTID, p.PRODUCTNAME, MONTH(o.PURCHASEDATE)
ORDER BY p.PRODUCTID, Month;

-- AVERAGE ORDERVALUE PER CUSTOMER
SELECT o.CUSTOMERID,AVG(od.PURCHASEPRICE) AS AverageOrderValue
FROM ORDERDETAILS od
JOIN ORDERS o ON od.ORDER_ID = o.ORDERID
GROUP BY o.CUSTOMERID
ORDER BY AverageOrderValue DESC;

